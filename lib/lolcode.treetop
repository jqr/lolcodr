grammar LOLCode
  rule program
    start more_expressions:(expression)* {
      def run(env = {})
        value = nil
        more_expressions.elements.each do |expression|
          value = expression.value(env)
        end
        [value, env]
      end
    }
  end
  
  rule start
    onl 'HAI' os nl
  end
  
  rule expression
    if_else
    / if
    / short_if
    / loop
    / real_expression nl {
      def value(env)
        real_expression.value(env)
      end
    } 
  end
  
  rule real_expression
    os e:(builtin_command / value_expression) os {
      def value(env)
        e.value(env)
      end
    }
  end
  
  rule value_expression
    comparison / type_query / number / string / boolean / variable
  end

  rule builtin_command
     exit / break / print / get_line / variable_declaration / increment_variable / variable_assignment
  end

  rule if
    os boolean:value_expression ', O RLY?' nl 'YA RLY' nl expressions:expression* 'OIC' nl {
      def value(env)
        if boolean.value(env)
          expressions.elements.each do |expression|
            expression.value(env)
          end
        end
      end
    }
  end

  rule if_else
    os boolean:value_expression ', O RLY?' nl os 'YA RLY' os nl if_expressions:expression* os 'NO WAI' os nl else_expressions:expression* os 'OIC' os nl {
      def value(env)
        expressions = boolean.value(env) ? if_expressions : else_expressions
        expressions.elements.each do |expression|
          expression.value(env)
        end
      end
    }
  end
  
  rule short_if
    os 'IZ' s boolean:value_expression '?' expression {
      def value(env)
        if boolean.value(env)
          expression.value(env)
        end
      end
    }
  end

  rule break
    'KTHX' {
      def value(env)
        throw :break
      end
    }
  end
  
  rule loop
    os 'IM IN YR' s label os nl expressions:expression* os 'IM OUTTA YR' s label os nl {
      def value(env)
        catch :break do
          loop do
            expressions.elements.each do |expression|
              expression.value(env)
            end
          end
        end
      end
    }
  end
  
  rule exit
    'KTHXBYE' { def value(env); exit; end }
  end
  
  rule print
    'VISIBLE' s real_expression disable_newline:('!')? {
      def value(env)
        if disable_newline.text_value.empty?
          puts real_expression.value(env)
        else
          print real_expression.value(env)
        end
      end
    }
  end
  
  rule get_line
    'GIMMEH' s variable {
      def value(env)
        env[variable.text_value] = gets.chom
      end
    }
  end

  rule increment_variable
    increment_variable_with_delta / increment_variable_without_delta
  end  

  rule increment_variable_with_delta
    'UP' s variable '!!' delta:real_expression {
      def value(env)
        env[variable.text_value] += delta.value(env)
      end
    }
  end
  
  rule increment_variable_without_delta
    'UP' s variable '!!' {
      def value(env)
        env[variable.text_value] += 1
      end
    }
  end
  
  rule variable_declaration
    variable_declaration_with_set / variable_declaration_without_set
  end

  rule variable_declaration_with_set
    'I' s 'HAS' s 'A' s variable s 'ITZ' s real_expression {
      def value(env)
        env[variable.text_value] = real_expression.value(env)
      end
    }
  end
  
  rule variable_declaration_without_set
    'I' s 'HAS' s 'A' s variable {
      def value(env)
        env[variable.text_value] = nil
      end
    }
  end
  
  rule variable_assignment
    variable s 'R' s value_expression {
      def value(env)
        env[variable.text_value] = value_expression.value(env)
      end
    }
  end
  
  rule type_query
    'TIPE OF' s value_expression {
      def value(env)
        case(value_expression.value(env))
        when NilClass
          'NOOB'
        when TrueClass, FalseClass
          'TROOF'
        when String
          'YARN'
        when Integer, Bignum
          'NUMBR'
        when Float
          'NUMBAR'
        end
      end
    }
  end
  
  rule comparison
    equal
  end
  
  rule equal
    'BOTH SAEM' s first:value_expression s 'AN' s second:value_expression {
      def value(env)
        first.value(env) == second.value(env)
      end
    }
  end
  
  rule keyword
    'KTHXBYE' / 'KTHX' / 'GTFO' / 'OIC' / 'BOTH SAEM' / 'IZ' / 'TIPE'
  end
  
  rule variable
    !keyword alpha alnum* {
      def value(env)
        env[text_value]
      end
    }
  end
  
  rule string
    '"' literal:(!'"' . / ':"')* '"' {
      def value(env)
        literal.text_value.gsub(%r{:\)}, "\n").gsub(%r{:>}, "\t").gsub(%r{:o}, "\g").gsub(%r{:"}, '"').gsub(%r{::}, ":")
      end
    }
  end
  
  rule number
    float / integer
  end

  rule float
    numeric+ '.' numeric+ { def value(env); text_value.to_f; end }
  end
  
  rule integer
    numeric+ { def value(env); text_value.to_i; end }
  end
  
  rule boolean
    ('WIN' / 'FAIL') {
      def value(env)
        text_value == 'WIN'
      end
    }
  end
  
  rule label
    alpha+
  end

  rule s
    [ \t]+
  end
  
  rule os
    s*
  end

  rule ns
    ![ \t] .
  end
  
  rule nl
    [\n]+
  end

  rule onl
    nl*
  end
  
  rule alpha
    [a-zA-Z]
  end
  
  rule numeric
    [0-9]
  end
  
  rule alnum
    alpha / numeric
  end  
end
