grammar LOLCode
  rule program
    "HAI" [\n] lines {
      def run
        lines.value
      end
      
      def variables
        Environment
      end
    }
  end
  
  rule lines
    loop 
    / s seq:(line)* {
      def value
        seq.elements.each { |l| l.value }
      end
    }
  end
  
  rule line
    s l:(comment / command) [\n] {
      def value
        l.value
      end
    }
  end
  
  rule command
    if / require / variable_declaration / variable_increment / print / exit
    / assign
  end
  
  rule if
    s 'IZ' s condition:command s 'BIGGER THAN' s compare:command '?' s conditional:command {
      def value
        if condition.value > compare.value
          conditional.value
        end
      end
    }
  end
  
  rule require
    s 'CAN HAS' s lib:([A-Z]+) '?' {
      def value
        nil
      end
    }
  end
  
  rule loop
    'IM IN UR LOOP' lines 'KTHX' {
      def value
        raise "loop"
        loop do
          lines.run
        end
      end
    }
  end
  
  rule variable_declaration
    s 'I HAS A' variable {
      def value
        nil
      end
    }
  end
  
  rule variable_increment
    s 'UP' variable '!!' number {
      def value
        variable.value = variable.value.to_i + number.value
      end
    }
  end

  rule print
    s 'VISIBLE' s expr '!'? {
      def value
        puts expr.value
      end
    }
  end
  
  rule exit
    s 'KTHXBYE' {
      def value
        exit
      end
    }
  end
  
  rule assign
    s 'LOL' variable 'R' expr {
    	def value
    	  variable.value = expr.value
    	end
    }
    / expr
  end

  rule expr
    s term seq:( s add_op s term )* s {
    	def value
    	  seq.elements.inject(term.value) { |sum, el|
    	      el.add_op.operate(sum, el.term.value)
    	    }
    	end
    }
  end

  rule term
    factor s mul_op s term {	# Right-associative!
    	def value
    	  mul_op.operate(factor.value, term.value)
    	end
    }
    / factor
  end

  rule factor
    string
    / variable
    / number
    / '(' expr ')' {
    	def value
    	  expr.value
    	end
    }
  end

  rule variable
    s [a-zA-Z_] [a-zA-Z0-9]* s {
    	def value
    	  Environment[text_value.strip]
    	end
    	def value=(v)
    	  Environment[text_value.strip] = v
    	end
    }
  end

  rule number
    ([1-9] [0-9]* / '0')	{ def value; text_value.to_i; end }
  end

  rule add_op
    '+'				{ def operate(a, b); a+b; end }
    / '-'			{ def operate(a, b); a-b; end }
  end

  rule mul_op
    '*'				{ def operate(a, b); a*b; end }
    / '/'			{ def operate(a, b); a/b; end }
    / '%'			{ def operate(a, b); a%b; end }
  end

  rule s
    [ \t]*
  end

  rule string
    '"' inner_string '"'  {
      def value
        inner_string.value
      end
    }
  end
  
  rule inner_string
    [^"]* {
      def value
        text_value
      end
    }
  end
    
  rule comment
    s 'BTW' s rest_of_line {
      def value
        nil
      end
    }
  end
  
  rule rest_of_line
    .* !"\n"
  end
end
